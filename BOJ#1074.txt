#include <stdio.h>
#include <math.h>
#include <stdlib.h>
using namespace std;

int N, R, C;
int ans = 0;

void solve(int n, int r, int c) {

	if (n == 1) {
		if (r == R && c == C) { printf("%d", ans); return; }
		else if (r == R && c + 1 == C) { printf("%d", ans + 1); return; }
		else if (r + 1 == R && c == C) { printf("%d", ans + 2); return; }
		else if (r + 1 == R && c + 1 == C) { printf("%d", ans + 3); return; }
	}

	if (R < r + pow(2, n - 1) && C < c + pow(2, n - 1)) {
		solve(n - 1, r, c);
	}
	if (R < r + pow(2, n - 1) && C >= c + pow(2, n - 1)) {
		ans += pow(2, n - 1) * pow(2, n - 1);
		solve(n - 1, r, c + pow(2, n - 1));
	}
	else if (R >= r + pow(2, n - 1) && C < c + pow(2, n - 1)) {
		ans += 2 * pow(2, n - 1) * pow(2, n - 1);
		solve(n - 1, r + pow(2, n - 1), c);
	}
	else if (R >= r + pow(2, n - 1) && C >= c + pow(2, n - 1)) {
		ans += 3 * pow(2, n - 1) * pow(2, n - 1);
 		solve(n - 1, r + pow(2, n - 1), c + pow(2, n - 1));
	}
}

int main(void) {
	
	scanf_s("%d %d %d", &N, &R, &C);

	if (N == 1) {
		solve(1, 0, 0);
	}
	// 1사분면에 있는 경우
	else if (R < pow(2, N - 1) && C < pow(2, N - 1)) {
		solve(N - 1, 0, 0);
	}
	// 2사분면에 있는 경우
	else if (R < pow(2, N - 1) && C >= pow(2, N - 1)) {
		ans += pow(2, N - 1) * pow(2, N - 1);
		solve(N - 1, 0, pow(2, N - 1));
	}
	// 3사분면
	else if (R >= pow(2, N - 1) && C < pow(2, N - 1)) {
		ans += 2 * pow(2, N - 1) * pow(2, N - 1);
		solve(N - 1, pow(2, N - 1), 0);
	}
	// 4사분면
	else if (R >= pow(2, N - 1) && C >= pow(2, N - 1)) {
		ans += 3 * pow(2, N - 1) * pow(2, N - 1);
		solve(N - 1, pow(2, N - 1), pow(2, N - 1));
	} 

	return 0;
}