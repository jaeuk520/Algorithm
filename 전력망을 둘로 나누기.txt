#include <string>
#include <vector>
#include <string.h>
#include <queue>
using namespace std;

bool visit[101];
vector<int> vec[101];

int max(int a, int b) {
    if(a>b) return a;
    return b;
}

int min(int a, int b) {
    if(a<b) return a;
    return b;
}

int bfs(int n) {
    queue<int> q;
    q.push(n);
    
    visit[n] = true;
    
    int cnt = 0;
    
    while(!q.empty()) {
        int size = q.size();
        for(int i=0; i<size; i++) {
            n = q.front();
            q.pop();
            cnt++;
            for(int j=0; j<vec[n].size(); j++) {
                if(visit[vec[n][j]]) continue;
                q.push(vec[n][j]);
                visit[vec[n][j]] = true;
            }
        }
    }
    return cnt;
}

int solution(int n, vector<vector<int>> wires) {
    int answer = 10000;
    
    for(vector<int> v: wires) {
        vec[v[0]].push_back(v[1]);
        vec[v[1]].push_back(v[0]);
    }
    
    //하나씩 끊기
    for(vector<int> v: wires) {
        vec[v[0]].push_back(v[1]);
        vec[v[1]].push_back(v[0]);
        
        memset(visit, false, sizeof(visit));
        
        visit[v[1]] = true;
        int cnt1 = bfs(v[0]);
        
        visit[v[1]] = false;
        visit[v[0]] = true;
        int cnt2 = bfs(v[1]);
        
        int cal = max(cnt1, cnt2) - min(cnt1, cnt2);
        answer = min(answer, cal);
    }
    
    return answer;
}