#include <string>
#include <vector>
#include <stack>
#include <algorithm>
#include <iostream>
using namespace std;

bool visit[100][100];
vector<int> answer;

int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};

void dfs(vector<string> maps, stack<pair<int,int>> s, int i, int j) {
    
    s.push(make_pair(i,j));
    visit[i][j] = true;
    
    int temp = 0;
    
    while(!s.empty()) {
        
        int x = s.top().first;
        int y = s.top().second;
        s.pop();
        
        temp += maps[x][y] - 48;
        
        for(int i=0; i<4; i++) {
            
            // 범위 out
            if(x + dx[i] < 0 || x + dx[i] >= maps.size()
              || y + dy[i] < 0 || y + dy[i] >= maps[0].size()) {
                continue;
            }
            
            // 방문 한 곳 제외
            if(visit[x + dx[i]][y + dy[i]]) continue;
            
            // X 안감
            if(maps[x + dx[i]][y + dy[i]] == 'X') continue;
            
            s.push(make_pair(x + dx[i], y + dy[i]));
            visit[x + dx[i]][y + dy[i]] = true;
        }
        
    }
    answer.push_back(temp);
}

vector<int> solution(vector<string> maps) {
    
    stack<pair<int,int>> s;
    
    for(int i=0; i<maps.size(); i++) {
        for(int j=0; j<maps[i].size(); j++) {
            if(maps[i][j] != 'X' && !visit[i][j]) {
                dfs(maps, s, i, j);
            }
        }
    }
    
    sort(answer.begin(), answer.end());
    
    if(answer.empty()) {
        answer.push_back(-1);
    }
    
    return answer;
}