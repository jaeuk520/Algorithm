#include <queue>
#include <vector>
#include <iostream>
using namespace std;

vector<int> vec[20001];
bool visit[20001];
int check[20001];
queue<int> q;

bool bfs(int temp) {
	q.push(temp);
	visit[temp] = true;
	check[temp] = 1;
	int x;
	while (!q.empty()) {
		x = q.front();
		q.pop();
		for (int i = 0; i < vec[x].size(); i++) {
			if (!visit[vec[x][i]]) {
				if (check[x] == 1) {
					visit[vec[x][i]] = true;
					check[vec[x][i]] = 2;
					q.push(vec[x][i]);
				}
				else if (check[x] == 2) {
					visit[vec[x][i]] = true;
					check[vec[x][i]] = 1;
					q.push(vec[x][i]);
				}
			}
			else {
				if (check[vec[x][i]] != 0 && check[vec[x][i]] == check[x]) {
					//큐 clear

					return false;
				}
			}
		}
	}
	return true;
}

int main(void) {

	int k, V, e, u, v;
	scanf("%d", &k);
	//test case K
	while (k--) {
		bool bi = true;
		scanf("%d %d", &V, &e);
		// edge
		for (int i = 0; i < e; i++) {
			scanf("%d %d", &u, &v);
			vec[u].push_back(v);
			vec[v].push_back(u);
		}
		for (int i = 1; i <= V; i++) {
			if (!visit[i]) {
				if (!bfs(i)) { bi = false; break; }
			}
		}
		if (bi) printf("YES\n");
		else printf("NO\n");

		// clear 작업
		for (int i = 1; i <= V; i++) {
			visit[i] = false;
			check[i] = 0;
			vec[i].clear();
		}
	}

	return 0;
}