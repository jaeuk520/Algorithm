#include <cstdio>
#include <vector>
#include <iostream>

using namespace std;

class TRI {
public: 
	int a, b, w; //a에서 b로가는 edge (a쪽에서 넣었다), weight
};
//배열에다가 heap 가지고 만들건데 w가 작을수록 먼저 나옴
class PQ {
public:
	int n; //size
	TRI Arr[1000];  
	PQ();
	TRI Delete();
	void insert(TRI x);
	int isEmpty();
};

PQ::PQ() {
	n = 0;
}

int PQ::isEmpty() {
	return n == 0;  //n == 0 이면 1 리턴
}

void PQ::insert(TRI x) {
	int i, tmp;
	Arr[n + 1] = x; // 1~n까지 포함
	i = n + 1;
	n = n + 1; //개수를 맞춤
	while (i > 1 && Arr[i].w < Arr[i / 2].w) {
		swap(Arr[i], Arr[i / 2]);
		i = i / 2;
	}
}

TRI PQ::Delete() {
	TRI ret = Arr[1];
	int i, j;
	if (n == 1) { n = 0; return ret; }
	Arr[1] = Arr[n];
	i = 1; n = n - 1;
	while (1) {
		if (i * 2 > n) {
			break;
		}
		else if (i * 2 + 1 > n) { // Left Child Only
			if (Arr[i * 2].w < Arr[i].w) {
				swap(Arr[i * 2], Arr[i]);
				i = i * 2;
			}
			else break;
		}
		else { // Left and Right Child Only
			if (Arr[i].w > Arr[i * 2].w && Arr[i].w > Arr[i * 2 + 1].w) { // Parent node > Child node
				if (Arr[i * 2].w < Arr[i * 2 + 1].w) { // Left < Right
					j = i * 2;
				}
				else { //Right < Left
					j = i * 2 + 1;
				}
				swap(Arr[i], Arr[j]); //Swap parent node with a child node
				i = j;
			}
			else if (Arr[i].w > Arr[i * 2].w && Arr[i].w <= Arr[i * 2 + 1].w) { //Parent > Left child && Parent <= Right child 
				j = i * 2;
				swap(Arr[i], Arr[j]); //Swap parent with a left child
				i = j;
			}
			else if (Arr[i].w <= Arr[i * 2].w && Arr[i].w > Arr[i * 2 + 1].w) { //Parent <= Left child && Parent > Left child
				j = i * 2 + 1;
				swap(Arr[i], Arr[j]); //Swap parent with a right child
				i = j;
			}
			else break;
		}
	}
	return ret; //return root node (deleted node)
}

PQ Q;

int n, m;
vector<pair<int, int>> Edges[1000];
int M[1000]; //marking node

int main() {

	int c, i, a, b, w;
	TRI x, y;
	scanf_s("%d %d", &n, &m);
	for (i = 0; i < m; i++) {
		scanf_s("%d %d %d", &a, &b, &w);
		Edges[a].push_back(pair<int, int>(b, w));
		Edges[b].push_back(pair<int, int>(a, w));
	}
	c = 1; // current node
	M[c] = 1; // make the current node
	for (i = 0; i < Edges[c].size(); i++) { //insert all edges to Q
		x.a = c;
		x.b = Edges[c][i].first;
		x.w = Edges[c][i].second;
		Q.insert(x);
	}
	while (Q.isEmpty() == 0) {
		y = Q.Delete();
		if (M[y.a] == 1 && M[y.b] == 1) { //both are marked, make cycle
			continue;
		}
		else {
			printf("Edge from Node %d to Node %d of Weight %d Selected. \n", y.a, y.b, y.w);
			c = y.b;
			M[c] = 1;
			for (i = 0; i < Edges[c].size(); i++) {
				x.a = c;
				x.b = Edges[c][i].first;
				x.w = Edges[c][i].second;
				Q.insert(x);
			}
		}
	}
	
	/*
	TRI s[100] = {
		{1,2,3},
		{4,5,6},
		{2,2,4},
		{4,2,1},
		{4,2,2},
		{4,6,8}
	};
	TRI t;
	Q.insert(s[0]);
	Q.insert(s[1]);
	Q.insert(s[2]);
	Q.insert(s[3]);
	Q.insert(s[4]);
	Q.insert(s[5]);
	t = Q.Delete();
	printf("Deleted (%d %d %d)\n", t.a, t.b, t.w);
	*/
	
	return 0;
}