#include <string>
#include <vector>
#include <queue>
#include <iostream>
using namespace std;

queue<pair<int,int>> q;

int dx[4] = {0, 0, -1, 1};
int dy[4] = {1, -1, 0, 0};

int answer = 0;
bool visit[101][101];

int bfs(int x, int y, vector<string> board) {
    
    q.push(make_pair(x, y));
    visit[x][y] = true;
    
    while(!q.empty()) {
        
        int cnt_q = q.size();
        
        for(int i=0; i<cnt_q; i++) {
            
            pair<int,int> xy = q.front();
            q.pop();
            
            for(int j=0; j<4; j++) {
                
                x = xy.first;
                y = xy.second;
                
                while(1) {
                    // 좌표를 벗어남
                    if(x + dx[j] >= board.size() || x + dx[j] < 0 ||
                      y + dy[j] >= board[0].size() || y + dy[j] < 0) {
                        
                        if(board[x][y] == 'G') return ++answer;
                        if(visit[x][y]) break;
                        
                        q.push(make_pair(x, y));
                        visit[x][y] = true;
                        break;
                    } 
                    // 장애물 만남
                    else if(board[x + dx[j]][y + dy[j]] == 'D') {
                        
                        if(board[x][y] == 'G') return ++answer;
                        if(visit[x][y]) break;
                        
                        q.push(make_pair(x,y));
                        visit[x][y] = true;
                        break;
                    }
                    
                    // 이동
                    x += dx[j];
                    y += dy[j];
                    
                }
            }
        }
        answer++;
    }
    return -1;
}

int solution(vector<string> board) {
    
    int x, y;
    
    for(int i=0; i<board.size(); i++) {
        for(int j=0; j<board[i].size(); j++) {
            if(board[i][j] == 'R') {
                x = i;
                y = j;
            }
        }
    }
    
    return bfs(x, y, board);
}