#include <cstdio>
#define NUMBER 1000000
#define MOD 1000000007
using namespace std;

long long arr[NUMBER];
long long seg[4 * NUMBER];

long long init(int start, int end, int node) {

	if (start == end) return seg[node] = arr[start];
	int mid = (start + end) / 2;
	return seg[node] = ((init(start, mid, node * 2) % MOD) * (init(mid + 1, end, node * 2 + 1) % MOD)) % MOD;
}

long long update(int start, int end, int node, int idx, long long num) {

	if (idx < start || idx > end) return seg[node];
	if (start == end) return seg[node] = num;
	int mid = (start + end) / 2;
	return seg[node] = ((update(start, mid, node * 2, idx, num) % MOD) * (update(mid + 1, end, node * 2 + 1, idx, num) % MOD)) % MOD;
	
	/*
	if (idx < start || idx > end) return;
	if (arr[idx] == 0 && seg[node] == 0) {
		arr[idx] = num; init(start, end, node);
	}
	seg[node] = (seg[node] / arr[idx] * num) % MOD;
	if (start == end) return;
	int mid = (start + end) / 2;
	update(start, mid, node * 2, idx, num);
	update(mid + 1, end, node * 2 + 1, idx, num);
	*/
}

long long multiply(int start, int end, int node, int left, int right) {

	if (left > end || right < start) return 1;
	if (left <= start && right >= end) return seg[node];
	int mid = (start + end) / 2;
	return ((multiply(start, mid, node * 2, left, right) % MOD) * (multiply(mid + 1, end, node * 2 + 1, left, right) % MOD)) % MOD;
}

int main(void) {

	int n, m, k;
	int a, b;
	long long c;
	scanf_s("%d %d %d", &n, &m, &k);
	for (int i = 0; i < n; i++) {
		scanf_s("%lld", &arr[i]);
	}
	// init segment tree
	init(0, n - 1, 1);

	for (int i = 0; i < m + k; i++) { 
		scanf_s("%d %d %lld", &a, &b, &c);
		switch (a) {
		case 1: {
			// change idx b number to c
			update(0, n - 1, 1, b - 1, c);
			arr[b - 1] = c;
			break;
		}
		case 2: {
			// print the result of multiply of idx b ~ c
			// modular 1,000,000,007
			printf("%lld\n", multiply(0, n - 1, 1, b - 1, c - 1));
			break;
		}
		}
	}

	return 0;
}