#include <cstdio>
#include <vector>
#include <string.h>
#include <algorithm>
#include <queue>
using namespace std;

vector<int> dfs_result;
vector<int> bfs_result;
vector<int> vec[10001];
bool visit[1001];

void dfs(int x) {
	if (visit[x]) return;
	visit[x] = true;
	dfs_result.push_back(x);
	for (int i = 0; i < vec[x].size(); i++) {
		dfs(vec[x][i]);
	}
}

void bfs(int x) {
	queue<int> q;
	q.push(x);
	visit[x] = true;
	while (!q.empty()) {
		int temp = q.front();
		q.pop();
		bfs_result.push_back(temp);
		for (int i = 0; i < vec[temp].size(); i++) {
			if (!visit[vec[temp][i]]) {
				q.push(vec[temp][i]);
				visit[vec[temp][i]] = true;
			}
		}
	}

}

int main(void) {

	int n, m, v;
	int num1, num2;
	scanf_s("%d %d %d", &n, &m, &v);
	for (int i = 0; i < m; i++) {
		scanf_s("%d %d", &num1, &num2);
		vec[num1].push_back(num2);
		vec[num2].push_back(num1);
	}
	for (int i = 1; i <= n; i++) {
		sort(vec[i].begin(), vec[i].end());
	}
	dfs(v);
	memset(visit, false, sizeof(visit));
	for (int i = 0; i < dfs_result.size(); i++) {
		printf("%d ", dfs_result[i]);
	}
	printf("\n");
	bfs(v);
	for (int i = 0; i < bfs_result.size(); i++) {
		printf("%d ", bfs_result[i]);
	}

	return 0;
}
