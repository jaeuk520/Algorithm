#include <stdio.h>
#include <vector>
using namespace std;

long long seg[1000000 * 4];
long long arr[1000000];

long long init(int start, int end, int node) {

	if (start == end) return seg[node] = arr[start];
	int mid = (start + end) / 2;
	return seg[node] = init(start, mid, node * 2) + init(mid + 1, end, node * 2 + 1);
}

void update(int start, int end, int node, int idx, long long dif) {
	
	if (idx > end || idx < start) return;
	seg[node] += dif;
	if (start == end) return;
	int mid = (start + end) / 2;
	update(start, mid, node * 2, idx, dif);
	update(mid + 1, end, node * 2 + 1, idx, dif);
}

long long sum(int start, int end, int node, int left, int right) {

	if (end < left || right < start) return 0;
	if (left <= start && end <= right) return seg[node];
	int mid = (start + end) / 2;
	return sum(start, mid, node * 2, left, right) + sum(mid + 1, end, node * 2 + 1, left, right);
}

int main(void) {

	int n, m, k;
	int a, b;
	long long c;

	scanf("%d %d %d", &n, &m, &k);

	for (int i = 0; i < n; i++) {
		scanf("%lld", &arr[i]);
	}

	init(0, n - 1, 1);
	
	for (int i = 0; i < m + k; i++) {
		scanf("%d %d %lld", &a, &b, &c);
		switch (a) {
		case 1: {
			//b번쨰 수를 C로 바꿈
			update(0, n - 1, 1, b - 1, c - arr[b - 1]);
			arr[b - 1] = c;
			break;
		}
		case 2: {
			//b번째 수부터 c번째 수까지의 합을 구하여 출력
			printf("%lld\n", sum(0, n - 1, 1, b - 1, c - 1));
			break;
		}
		}
	}


	return 0;
}